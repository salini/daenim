/* -*-c++-*- 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.

   Authors:

   Jeremy Moles  <jeremy@emperorlinux.com>
   Cedric Pinson <mornifle@plopbyte.net>
*/

#ifndef ANIMTKVIEWERGUI_H
#define ANIMTKVIEWERGUI_H

#include "ViewerExt"

#include <osgWidget/WindowManager>
#include <osgAnimation/EaseMotion>

#include <osgDB/WriteFile>

#include <osgAnimation/BasicAnimationManager>

class AnimtkViewerGUI: public osgWidget::WindowManager
{
public:
    AnimtkViewerGUI(osgViewer::Viewer*, unsigned int, unsigned int, osgAnimation::BasicAnimationManager*, std::string);

private:
    void setAnimationManager();
    void accept(osg::NodeVisitor &nv);

    osgViewer::ViewerExt* viewer;
    //------------- For Animation --------------//
    osg::ref_ptr<osgAnimation::BasicAnimationManager>   _basicAnimManager;
    osgAnimation::Animation*                             animation;
    float                                                animDuration;

    osg::ref_ptr<osgWidget::Box>        _buttonBox;
    osg::ref_ptr<osgWidget::Box>        _sliderBarBox, _sliderCursorBox;
    osg::ref_ptr<osgWidget::Box>        _speedBarBox, _speedCursorBox;
    osg::ref_ptr<osgWidget::Box>        _infoLabelBox;
    
    osg::ref_ptr<osgWidget::Label>      _speedLabel, _timeLabel, _frameLabel;

    std::string _extension;

    float  _sliderPos, _sliderPercent, _speedPos, _speedPercent;

protected:
    osgWidget::Widget* _createButton(const std::string&);
    bool _buttonPush(osgWidget::Event&);

    //---------------- Interface Setup -------------------//
    void _createButtonBoundingBox();
    void _createSliderBoundingBox();
    void _createSpeedBoundingBox();
    void _createInfoBar();

    bool _speedDown(osgWidget::Event& ev);
    bool _speedDrag(osgWidget::Event& ev);
    void _setSpeedPos(float pos);
    int  getSpeedSlot();
    void setSpeedSlot(int i);

    bool _sliderDown(osgWidget::Event& ev) ;
    bool _sliderDrag(osgWidget::Event& ev) ;
    void _setSliderPos(float pos);
    void _setSliderTime(float time);

    void setPause(bool state);
    void startRecordAnimation();
};


struct ButtonFunctor: public osg::Drawable::UpdateCallback 
{
    osgAnimation::OutQuadMotion _motion;
    const float                 _speed;
    float                       _direction;
    float                       _previous;

    ButtonFunctor();

    bool enter(osgWidget::Event& e);
    bool leave(osgWidget::Event& e);
    void update(osg::NodeVisitor* nv , osg::Drawable* geom) ;
    void update(float t, osgWidget::Widget* w);
};






class WriteInFile : public osgViewer::ScreenCaptureHandler::CaptureOperation
{
public:
    WriteInFile(const std::string extension);
    virtual ~WriteInFile() {};
    virtual void operator() (const osg::Image& image, const unsigned int context_id);
    void setFileName(std::string fileName);

protected:

    std::string _filename;
    std::string _extension;
};


#endif
